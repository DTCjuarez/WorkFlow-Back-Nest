# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserOutput {
  _id: String!
  name: String!
  username: String!
  email: String!
  clienteAsociado: String
  nivelUser: String!
}

type GeneralReportDto {
  mesYear: String
  fact: Float
  personalTotal: Float
  otros: Float
}

type CalendarGrafica {
  fecha: DateTime
  cantidad: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MonthlySummaryDto {
  mesYear: String
  ingresoFact: Float
  egresosTotalFact: Float
}

type OperatividadOut {
  operatividadPorcentual: Float
  operatividadHoras: Float
}

type IngresosDtoOut {
  ingresos: Float
  detracciones: Float
  igv: Float
}

type ProductoConsumidoDash {
  producto: String!
  cantidadConsumida: Int!
}

type DashRepuestos {
  prod1: ProductoConsumidoDash
  prod2: ProductoConsumidoDash
  prod3: ProductoConsumidoDash
  prod4: ProductoConsumidoDash
  prod5: ProductoConsumidoDash
  otros: ProductoConsumidoDash
}

type Dashboard {
  ingresosMensuales: IngresosDtoOut
  mantenimientosRealizados: Float
  mantenimientosDenegados: Float
  gastosGenerales: [GeneralReportDto!]
  operatividad: OperatividadOut
  calendario: [CalendarGrafica!]
  ingresosEgresos: [MonthlySummaryDto!]
  repuestosMasConsumidos: DashRepuestos
}

type RepuestoType {
  id: String
  cantidadReserva: Float
  marca: String
  producto: String
  cantidad: Float!
  precio: Float
}

type CarInfo {
  id: String!
  placa: String!
  fechaSoat: DateTime!
  vigenciaContrato: DateTime!
  cliente: String!
  propietario: String!
  kmActual: Float!
  Puntaje: Float!
  Mantenimientos: [MantenimientoInfo!]
}

type MantenimientoInfo {
  id: String!
  fecha: DateTime!
  tipo: String!
  repuestosUsados: Float!
}

type MantenimientoInfoDto {
  placa: String!
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  cambiosSolicitados: String
  repuestos: [RepuestoType!]
  repuestosAjuste: [RepuestoType!]
  documentos: [String!]
}

type MantenimientoInfoDto56 {
  _id: String!
  placa: String!
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  cambiosSolicitados: String
  diagnostico: String
  diagnosticoFinal: String
  repuestos: [RepuestoType!]
  repuestosAjuste: [RepuestoType!]
  documentos: [String!]
}

type MantenimientoResult {
  cantidad: Int!
  mantenimientos: [MantenimientoInfoDto!]!
}

type RepuestoType2 {
  _id: String!
  cantidadReserva: Float
  marca: String
  producto: String
  cantidad: Float!
  precio: Float
}

type MantenimientoInfoDto2 {
  _id: String!
  placa: String!
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  repuestos: [RepuestoType2!]
  repuestosAjuste: [RepuestoType2!]
  documentos: [String!]
}

type HomeAdminDTO {
  cantidadCompletada: Int!
  cantidadRevision: Int!
  cantidadTotal: Int!
  mantenimientos: [MantenimientoInfoDto2!]!
}

type RepuestoDTO {
  id: ID
  producto: String
  marca: String
  cantidad: Float
  cantidadReserva: Float
  precio: Float
}

type homeMantDTO {
  _id: ID
  placa: String
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  cambiosSolicitados: String
  repuestos: [RepuestoDTO]
  repuestosAjuste: [RepuestoDTO]
  documentos: [String]
}

type MaintenanceCountDto {
  dayMes: String
  cantidad: Float
}

type CalendarAndMantenimientosDTO {
  calendar: [MaintenanceCountDto]
  mantenimientos: [homeMantDTO]
}

type ProductoConsumido {
  producto: String!
  cantidadConsumida: Int!
}

type MesRepuestos {
  mesYear: String
  prod1: ProductoConsumido
  prod2: ProductoConsumido
  prod3: ProductoConsumido
  prod4: ProductoConsumido
  prod5: ProductoConsumido
  otros: ProductoConsumido
}

type Costos {
  costoTotal: Float
  costoPreventivos: Float
  costoCorrectivos: Float
  costoMesPasado: Float
}

type KmRecorridoPorMes {
  mes: String
  kmRecorridoTotal: Float
}

type RepuestoConsumido {
  producto: String
  costo: Float
}

type RepuestosMasConsumidosPorMes {
  mes: String
  repuesto1: RepuestoConsumido
  repuesto2: RepuestoConsumido
  repuesto3: RepuestoConsumido
  repuesto4: RepuestoConsumido
  otros: Float
}

type OperatividadPorMes {
  mes: String
  operatividad: Float
}

type EstadisticWebDTO {
  kmRecorrido: [KmRecorridoPorMes!]
  costos: Costos
  puntaje: Float
  placa: String
  cliente: String
  cantidadMatenimientos: Float
  cantidadMatDenegados: Float
  repuestosConsumidos: RepuestosMasConsumidosPorMes
  operatividad: [OperatividadPorMes!]
}

type HistorialCarData {
  placa: String
  cliente: String
  fechaSoat: DateTime
  ultimaRevision: DateTime
  vigenciaContrato: DateTime
  kmActual: Float
  operatividad: Float
}

type Mantenimientos {
  _id: String
  placa: String
  cliente: String
  fechaInicio: DateTime
  fechaFin: DateTime
  tipo: String
  repuestoUsados: Float
  costoRepuestos: Float
}

type MantenimientoTableType {
  mantenimientos: [Mantenimientos!]!
  totalPages: Int!
}

type RepuestoSearchType {
  _id: String
  cantidadReserva: Float
  marca: String
  producto: String
  cantidad: Float!
  precio: Float
}

type RepuestosResult {
  repuestos: [RepuestoSearchType!]!
  totalPages: Int!
}

type GetPlacasDto {
  _id: String!
  placa: String!
  cliente: String!
  tipoContrato: String!
  propietario: String!
  fechaSoat: DateTime!
}

type GetForPlacasDto {
  _id: String
  placa: String
  cliente: String
  tipoContrato: String
  kmActual: Float
  propietario: String
  fechaSoat: DateTime
}

type GetPlacasClientDto {
  _id: String!
  placa: String!
  cliente: String!
  fechaSoat: DateTime!
}

type SearchPlacas {
  cars: [GetPlacasDto!]!
  totalPages: Float!
}

type NotificacionDTO {
  _id: String!
  tipo: String!
  titulo: String!
  identificador: String!
  descripcion: String!
  fecha: DateTime!
  leido: Boolean!
}

type FacturaDto {
  numeroFactura: String!
  monto: Float!
  igv: Float
  detraccion: Float
  tipo: String!
  notificacion: Boolean!
  fecha: DateTime!
  involucrado: String
  documentos: [String!]
}

type ProveedorDto {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreContacto: String
  numeroContacto: Int
  email: String
  rubro: String
  documentos: [String]
}

type ProveedorResult {
  proveedor: [ProveedorDto!]!
  totalPages: Int!
}

type SalarioFechaDto {
  salario: Float!
  fecha: DateTime!
}

type PersonalDto {
  _id: String
  nombre: String!
  numero: Int
  email: String
  fechaIngreso: DateTime
  salarioFecha: [SalarioFechaDto]
  documentos: [String]
}

type PersonalResult {
  personal: [PersonalDto!]!
  totalPages: Int!
}

type ContratoDto {
  numeroContrato: String!
  fechaInicio: DateTime!
  fechaFin: DateTime!
}

type ClienteDto {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreCliente: String
  numeroContacto: Float
  email: String!
  rubro: String!
  contratos: [ContratoDto]
  documentos: [String]
}

type ClientesResult {
  clientes: [ClienteDto!]!
  totalPages: Int!
}

type Query {
  """Esta Función obtiene un usuario por su username"""
  obtener_usuario_por_username(username: String!): UserOutput!

  """
  Esta funcion retorna el calendario de mantenimientos programados del mes, y ademas los mantenimientos para el dia de hoy
  """
  Query_Calendar_Hoy_Tecnico: CalendarAndMantenimientosDTO

  """
  Esta funcion retorna los mantenimientos desde el día de hoy para la pestaña de actividades
  """
  Actividades: [homeMantDTO!]!

  """
  Esta función retorna los repuestos consumidos en los ultimos x meses, para el reporte de repuestos
  """
  grafica_repuesto_xmeses(startDate: String!, months: Float!): [MesRepuestos!]!

  """
  Esta función retorna una matriz con las fechas de los mantenimientos que tengan de estado "programado"
  """
  calendar: [DateTime!]!

  """Esta funcion retorna la informacion de un mantenimiento por id"""
  Mantenimiento_Info_por_ID(id: String!): MantenimientoInfoDto!

  """Esta funcion retorna la informacion de un mantenimiento por placa"""
  Mantenimiento_Info_por_Placa(placa: String!): [MantenimientoInfoDto56!]!

  """
  Esta funcion se usa en el home del admin y retorna la cantidad de mantenimientos programados, la cantidad total de mantenimientos y los mantenimientos programados
  """
  home_admin(fecha: DateTime!): HomeAdminDTO!

  """
  Esta Función retorna la información de un auto ademas de sus mantenimientos (id, fecha, tipo, repuestosUsados) por medio de su placa
  """
  admin_history_cars(placa: String!): CarInfo!

  """
  Esta funcion retorna la cantidad de mantenimientos por estado y los mantenimientos (información compleja) por estado y fecha
  """
  mantenimientoChanges(estado: String!, fecha: DateTime!): MantenimientoResult!

  """
  Esta función retorna: 1. el kilometraje recorrido por mes de un vehiculo, la matriz de salida tendra un formato de [mes, kmRecorridoTotal] donde mes es "MM/YYYY" y kmRecorridoTotal es un numero, 2. los costos de mantenimiento por mes, la matriz de salida tendra un formato de [mes, costoTotal] donde mes es "MM/YYYY" y costoTotal es un numero, 3. el puntaje de un vehiculo, 4. la cantidad de mantenimientos realizados por mes, 5. la cantidad de mantenimientos denegados por mes, 6. los repuestos mas consumidos por mes, la matriz de salida tendra un formato de [mes, repuesto1, repuesto2, repuesto3, repuesto4, otros] donde mes es "MM/YYYY" y repuesto1, repuesto2, repuesto3, repuesto4, otros son objetos con la estructura de RepuestoConsumido
  """
  estadisticas_web(placa: String!, fecha: String!): EstadisticWebDTO!

  """
  Esta función retorna la información de un auto incluyendo su operatividad porcentual por medio de su placa
  """
  Historial_Car_Admin(searchParam: String): HistorialCarData!

  """
  Esta función retorna los mantenimientos que cumplan con los criterios de busqueda
  """
  table_historial_Mantenimientos_admin(fechaInicio: DateTime, fechaTermino: DateTime, placa: String, page: Int): MantenimientoTableType!

  """Esta función retorna la cantidad de mantenimientos programados"""
  calendar_grafica: [CalendarGrafica!]!

  """Esta Función retorna la información de las notificaciones no leidas"""
  obtener_notificaciones_no_leidas: [NotificacionDTO!]!

  """
  Esta Función retorna la información de los carros (id, placa, cliente, propietarios fechaSoat)
  """
  obtener_info_placas: [GetPlacasDto!]!

  """Esta Función retorna la información de un auto por medio de su placa"""
  obtener_info_for_placa(placa: String!): GetForPlacasDto!

  """Esta Función retorna las placas de los autos"""
  buscar_placas_autos(placa: String!): [String!]!

  """
  Esta Función retorna la información de los carros (id, placa, cliente, propietarios fechaSoat)
  """
  obtener_info_placas_clientes: [GetPlacasClientDto!]!

  """Esta Función retorna las placas de los autos"""
  buscar_info_placas_tabla(plate: String!, page: Int): SearchPlacas!

  """
  Esta Función retorna la información de todos los repuestos (id, producto, marca, cantidad, cantidadReserva, precio)
  """
  obtener_todos_los_repuestos: [RepuestoType!]!

  """
  Esta función retorna la información de los repuestos que coincidan con el producto
  """
  buscar_repuestos(producto: String!, page: Int): RepuestosResult!

  """
  Esta Función retorna el total de salarios de todo el personal en la base de dato
  """
  Egreso_Facturas_Mensual(inputDate: String!): Float!

  """
  Esta Función retorna el total de salarios de todo el personal en la base de dato
  """
  Ingreso_Facturas_Mensual(inputDate: String!): Float!

  """
  Esta Función retorna una lista de facturas que coinciden con el numero de factura
  """
  buscar_factura(numeroFactura: String!): [FacturaDto!]!

  """Esta función retorna la información del proveedor en base a su nombre"""
  buscar_Proveedor(nombre: String!, page: Int): ProveedorResult!

  """
  Esta Función retorna la información de todo el personal en la base de datos
  """
  obtener_Todo_Personal: [PersonalDto!]!

  """Esta Función retorna la información de un personal por su id"""
  obtener_Personal_Por_Id(id: String!): PersonalDto!

  """Esta función retorna la información del personal en base a su nombre"""
  buscar_Pesonal(nombre: String!, page: Int): PersonalResult!

  """
  Esta Función retorna el total de salarios de todo el personal en la base de dato
  """
  obtener_Salari_Total(inputDate: String!): Float!

  """Esta Función retorna la información de un cliente en base a su ID"""
  obtener_Cliente_ID(id: String!): ClienteDto!

  """
  Esta Función retorna la información de todos los clientes en la base de datos
  """
  obtener_Todos_Clientes: [ClienteDto!]!

  """
  Esta función retorna la información de los clientes en base a su nombre
  """
  buscar_Clientes(nombreCliente: String!, page: Int): ClientesResult!

  """
  Esta Función retorna la información de los usuarios asociados a un cliente
  """
  obtener_Usuarios_por_IDcliente(clienteId: String!): [UserOutput!]!

  """Obtiene el resumen mensual de ingresos y egresos"""
  grafica_gastos_generales(inputDate: String!): [GeneralReportDto!]!

  """Obtiene el resumen mensual de ingresos y egresos"""
  grafica_ingresos_egresos(inputDate: String!): [MonthlySummaryDto!]!

  """Obtiene el resumen mensual de ingresos y egresos"""
  dashboard_web: Dashboard!
}

type Mutation {
  createUser(username: CreateUserDto!): Boolean!

  """Esta Función crea multiples usuarios en la base de datos"""
  crear_multiples_users(users: [CreateUserDto!]!): Boolean!
  updatePassword(username: String!, newPassword: String!): Boolean!

  """
  Esta Función actualiza la información de un usuario en la base de datos
  """
  actualizar_datos_usuario_por_id(_id: String!, newUsername: String, newPassword: String): String!

  """Esta Función elimina un usuario de la base de datos"""
  borrar_usuario_por_id(_id: String!): String!

  """Esta Función actualiza la información de un usuario"""
  actualizar_datos_usuario(oldUsername: String!, newUsername: String!, newName: String!, newEmail: String!, newPassword: String!): Boolean!

  """
  Esta función cambia el estado de un mantenimiento a "revision" y realiza una corrección de repuestos, esta corrección es quitar los repuestos que estaban reservados
  """
  cambiar_estado_revision_o_denegado(denegado: Boolean!, revision: Boolean!, id: String!, repuestosAjuste: [CreateRepuestoAjusteDto!]!, cambiosSolicitados: String): Boolean!

  """Esta funcion programa un mantenimiento"""
  programar_mantenimiento(programarMantInput: PrograMantenimientoDto!): String!

  """
  Esta funcion registra un mantenimiento que no haya sido previamente programado, ademas en el apartado de repuestos, solo pide entregar una id y la cantidad
  """
  regisrar_mantenimiento_no_programado(updateOneMantenimientoInput: UpdateOneMantenimientoDto!): String!

  """
  Esta Función registra un mantenimiento que ya haya sido previamente programado, ademas en el apartado de repuestos, pide entregar una id y la cantidad
  """
  regisrar_mantenimiento_programado(registrarMantInput: UpdateMantenimientoDto!): String!

  """
  Esta función actualiza el campo diagnosticoFinal de un mantenimiento y cambia su estado a "completado"
  """
  completar_mantenimiento(id: String!, diagnosticoFinal: String!, fechaFin: DateTime!): String!

  """Esta Función es para probar las notifaciones"""
  prueba_notificacion(inputNotification: CreateNotiDTO!): Boolean!

  """Esta Función registra un auto en la base de datos"""
  crear_auto(createCarInput: CreateCarDto!): String!

  """
  Esta Función registra un repuesto en la base de datos y retorna true si se registro correctamente
  """
  crear_repuesto(createRepuestoInput: CreateRepuestoDto!): Boolean!

  """
  Esta Función se usa internamente para actualizar repuestos en la base de datos y retorna true si se actualizo correctamente, no usar en el cliente
  """
  verficar_repuestos(verifyRepuestoInput: VerifyRepuestoDto!): Boolean!

  """Función para ingresar repuestos desde la web"""
  Ingreso_Repuestos_Web(data: IngresoRepuestosStringDto!): String!

  """
  Esta Función registra una factura en la base de datos y retorna el id de la factura creada
  """
  crear_factura(createFacturaInput: CreateFacturaDto!): String!

  """
  Esta Función registra un nuevo proveedor en la base de datos y retorna el id del documento creado
  """
  crear_Proveedor(input: ProveedorInput!): String!

  """
  Esta Función elimina un proveedor de la base de datos y retorna un booleano indicando si se eliminó correctamente o no
  """
  borrar_Proveedor(id: String!): Boolean!

  """
  Esta Función registra un nuevo persoanl en la base de datos y retorna el id del documento creado
  """
  crear_Personal(input: PersonalUserInput!): String!

  """
  Esta Función agrega un nuevo salario y una fecha al personal en la base de datos y retorna el documento actualizado
  """
  Agregar_Salario_Fecha(id: String!, salarioFecha: SalarioFechaInput!): PersonalDto!

  """
  Esta Función elimina un personal de la base de datos y retorna un booleano indicando si se eliminó correctamente o no
  """
  borrar_Personal(id: String!): Boolean!

  """
  Esta función actualiza uno o mas parametros de un personal en la base de datos
  """
  actualizar_Info_Personal(id: String!, input: UpdatePersonalInput!, salarioFecha: SalarioFechaInput): Boolean!

  """
  Esta Función registra un nuevo cliente en la base de datos y retorna el id del documento creado
  """
  crear_Cliente(cliente: ClienteUserInput!): String!

  """Esta Función actualizar un cliente en la base de datos por su id"""
  actualizar_Cliente(cliente: ClienteInput!, id: String!): String!

  """
  Esta Función elimina un cliente de la base de datos y retorna un booleano indicando si se eliminó correctamente o no
  """
  borrar_Cliente(id: String!): Boolean!

  """
  Esta Función agrega un nuevo contrato al cliente en la base de datos y retorna el documento actualizado
  """
  Agregar_Contrato_Cliente(id: String!, contrato: ContratoInput!): ClienteDto!

  """
  Esta Función elimina un contrato de un cliente en la base de datos y retorna el documento actualizado
  """
  eliminar_Contrato(clienteId: String!, numeroContrato: String!): Boolean!
}

input CreateUserDto {
  _id: String
  name: String!
  username: String!
  email: String!
  password: String!
  clienteAsociado: String
  nivelUser: String!
}

input CreateRepuestoAjusteDto {
  id: String!
  marca: String!
  producto: String!
  cantidad: Float!
  precio: Float!
}

input PrograMantenimientoDto {
  placa: String!
  tipo: String!
  tecnico: String!
  fecha: DateTime!
  anotaciones: String!
}

input UpdateOneMantenimientoDto {
  placa: String!
  tipo: String!
  tecnico: String!
  fecha: DateTime!
  fechaSoat: DateTime!
  kmPrevio: Float!
  Cliente: String!
  kmMedido: Float!
  fechaInicio: DateTime!
  diagnostico: String!
  repuestos: [RepuestoDto!]!
}

input RepuestoDto {
  id: String!
  cantidadReserva: Float
  marca: String!
  producto: String!
  cantidad: Float!
  precio: Float
}

input UpdateMantenimientoDto {
  _id: String!
  kmMedido: Float!
  fechaInicio: DateTime!
  fecha: DateTime!
  fechaSoat: DateTime!
  kmPrevio: Float!
  Cliente: String!
  diagnostico: String!
  repuestos: [RepuestoDto!]!
}

input CreateNotiDTO {
  canal: String!
  tipo: String!
  titulo: String!
  identificador: String!
  descripcion: String!
  fecha: DateTime!
  leido: Boolean!
}

input CreateCarDto {
  placa: String!
  propietario: String!
  cliente: String!
  fechaSoat: DateTime!
  kmRegistroInicial: Int!
  tipoContrato: String!
  fechaRevision: DateTime!
  vigenciaContrato: DateTime!
  puntaje: Float
}

input CreateRepuestoDto {
  cantidadReserva: Float!
  marca: String!
  producto: String!
  cantidad: Float!
  precio: Float!
}

input VerifyRepuestoDto {
  repuestos: [RepuestoDto!]
}

input IngresoRepuestosStringDto {
  repuestosActualizar: [UpdateRepuestoStringDto!]
  repuestosNuevos: [NuevoRepuestoStringDto!]
}

input UpdateRepuestoStringDto {
  _id: String!
  cantidad: String!
  precio: String!
}

input NuevoRepuestoStringDto {
  marca: String!
  producto: String!
  cantidad: String!
  precio: String!
}

input CreateFacturaDto {
  numeroFactura: String
  monto: Float!
  igv: Float
  detraccion: Float
  tipo: String!
  notificacion: Boolean!
  fecha: DateTime!
  involucrado: String
  documentos: [String!]
}

input ProveedorInput {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreContacto: String
  numeroContacto: Int
  email: String
  rubro: String
}

input PersonalUserInput {
  personal: PersonalInput!
  user: CreateUserDto
}

input PersonalInput {
  _id: String
  nombre: String!
  numero: Int
  email: String
  fechaIngreso: DateTime
  salarioFecha: [SalarioFechaInput]
  documentos: [String]
}

input SalarioFechaInput {
  salario: Float!
  fecha: DateTime!
}

input UpdatePersonalInput {
  nombre: String
  numero: Int
  email: String
  fechaIngreso: DateTime
}

input ClienteUserInput {
  cliente: ClienteInput!
  users: [CreateUserDto!]
}

input ClienteInput {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreCliente: String
  numeroContacto: Float
  email: String!
  rubro: String!
  contratos: [ContratoInput]
  documentos: [String]
}

input ContratoInput {
  numeroContrato: String!
  fechaInicio: DateTime!
  fechaFin: DateTime!
}

type Subscription {
  """
  Esta funcion retorna el calendario de mantenimientos programados del mes, y ademas los mantenimientos para el dia de los ultimos 7 días
  """
  Calendar_Hoy_Tecnico: CalendarAndMantenimientosDTO

  """
  Esta funcion retorna los mantenimientos desde el día de hoy para la pestaña de actividades
  """
  Actividades: [homeMantDTO!]!

  """Esta Función retorna la información de las notificaciones admin"""
  notificaciones_admin: NotificacionDTO!

  """Esta Función retorna la información de las notificaciones tecnico"""
  notificaciones_tecnico: NotificacionDTO!
  Personal: [PersonalDto!]!
}