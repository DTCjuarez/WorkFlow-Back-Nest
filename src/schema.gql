# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RepuestoType {
  id: String!
  cantidadReserva: Float
  marca: String
  producto: String
  cantidad: Float!
  precio: Float
}

type CarInfo {
  id: String!
  placa: String!
  fechaSoat: DateTime!
  vigenciaContrato: DateTime!
  cliente: String!
  propietario: String!
  kmActual: Float!
  Puntaje: Float!
  Mantenimientos: [MantenimientoInfo!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MantenimientoInfo {
  id: String!
  fecha: DateTime!
  tipo: String!
  repuestosUsados: Float!
}

type MantenimientoInfoDto {
  placa: String!
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  repuestos: [RepuestoType!]
  repuestosAjuste: [RepuestoType!]
  documentos: [String!]
}

type MantenimientoResult {
  cantidad: Int!
  mantenimientos: [MantenimientoInfoDto!]!
}

type RepuestoType2 {
  _id: String!
  cantidadReserva: Float
  marca: String
  producto: String
  cantidad: Float!
  precio: Float
}

type MantenimientoInfoDto2 {
  _id: String!
  placa: String!
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  repuestos: [RepuestoType2!]
  repuestosAjuste: [RepuestoType2!]
  documentos: [String!]
}

type HomeAdminDTO {
  cantidadProgramada: Int!
  cantidadTotal: Int!
  mantenimientos: [MantenimientoInfoDto2!]!
}

type RepuestoDTO {
  id: ID
  producto: String
  marca: String
  cantidad: Float
  cantidadReserva: Float
  precio: Float
}

type homeMantDTO {
  _id: ID
  placa: String
  tipo: String
  tecnico: String
  estado: String
  kmPrevio: Float
  kmMedido: Float
  cliente: String
  fecha: DateTime
  fechaInicio: DateTime
  fechaFin: DateTime
  fechaSoat: DateTime
  anotaciones: String
  diagnostico: String
  diagnosticoFinal: String
  cambiosSolicitados: String
  repuestos: [RepuestoDTO]
  repuestosAjuste: [RepuestoDTO]
  documentos: [String]
}

type MaintenanceCountDto {
  dayMes: String
  cantidad: Float
}

type CalendarAndMantenimientosDTO {
  calendar: [MaintenanceCountDto]
  mantenimientos: [homeMantDTO]
}

type ProductoConsumido {
  producto: String!
  cantidadConsumida: Int!
}

type MesRepuestos {
  mesYear: String!
  prod1: ProductoConsumido
  prod2: ProductoConsumido
  prod3: ProductoConsumido
  prod4: ProductoConsumido
  prod5: ProductoConsumido
  otros: ProductoConsumido
}

type GetPlacasDto {
  _id: String!
  placa: String!
  cliente: String!
  tipoContrato: String!
  propietario: String!
  fechaSoat: DateTime!
}

type SalarioFechaDto {
  salario: Float!
  fecha: DateTime!
}

type PersonalDto {
  _id: String!
  nombre: String!
  numero: Int
  email: String
  fechaIngreso: DateTime
  salarioFecha: [SalarioFechaDto]
  documentos: [String]
}

type ContratoDto {
  numeroContrato: String!
  fechaInicio: DateTime!
  fechaFin: DateTime!
}

type ClienteDto {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreCliente: String
  numeroContacto: Float
  email: String!
  rubro: String!
  contratos: [ContratoDto]
  documentos: [String]
}

type MonthlySummaryDto {
  mesYear: String!
  fact: Float!
  igv: Float!
  detraccion: Float!
  igvOtros: Float!
  personalTotal: Float!
  otros: Float!
}

type GeneralReportDto {
  mesYear: String!
  ingresoFact: Float!
  egresosFact: Float!
  egresosTotalFact: Float!
  igvIngresos: Float!
  igvEgresos: Float!
  detracciones: Float!
}

type Query {
  """
  Esta función retorna los repuestos consumidos en los ultimos x meses, para el reporte de repuestos
  """
  grafica_repuesto_xmeses(startDate: String!, months: Float!): [MesRepuestos!]!

  """
  Esta función retorna una matriz con las fechas de los mantenimientos que tengan de estado "programado"
  """
  calendar: [DateTime!]!

  """Esta funcion retorna la informacion de un mantenimiento por id"""
  Mantenimiento_Info_por_ID(id: String!): MantenimientoInfoDto!

  """
  Esta funcion se usa en el home del admin y retorna la cantidad de mantenimientos programados, la cantidad total de mantenimientos y los mantenimientos programados
  """
  home_admin(fecha: DateTime!): HomeAdminDTO!

  """
  Esta Función retorna la información de un auto ademas de sus mantenimientos (id, fecha, tipo, repuestosUsados) por medio de su placa
  """
  admin_history_cars(placa: String!): CarInfo!

  """
  Esta funcion retorna la cantidad de mantenimientos por estado y los mantenimientos (información compleja) por estado y fecha
  """
  mantenimientoChanges(estado: String!, fecha: DateTime!): MantenimientoResult!

  """
  Esta Función retorna la información de los carros (id, placa, cliente, propietarios fechaSoat)
  """
  obtener_info_placas: [GetPlacasDto!]!

  """
  Esta Función retorna la información de todos los repuestos (id, producto, marca, cantidad, cantidadReserva, precio)
  """
  obtener_todos_los_repuestos: [RepuestoType!]!

  """
  Esta Función retorna la información de todo el personal en la base de datos
  """
  obtener_Todo_Personal: [PersonalDto!]!

  """Esta Función retorna la información de un personal por su id"""
  obtener_Personal_Por_Id(id: String!): PersonalDto!

  """Esta Función retorna la información de un cliente en base a su ID"""
  obtener_Cliente_ID(id: String!): ClienteDto!

  """
  Esta Función retorna la información de todos los clientes en la base de datos
  """
  obtener_Todos_Clientes: [ClienteDto!]!

  """Obtiene el resumen mensual de gastos"""
  grafica_gastos_generales(inputDate: String!): [MonthlySummaryDto!]!

  """Obtiene el resumen mensual de ingresos y egresos"""
  grafica_ingresos_egresos(inputDate: String!): [GeneralReportDto!]!
}

type Mutation {
  createUser(username: CreateUserDto!): Boolean!
  updatePassword(username: String!, newPassword: String!): Boolean!

  """
  Esta función cambia el estado de un mantenimiento a "revision" y realiza una corrección de repuestos, esta corrección es quitar los repuestos que estaban reservados
  """
  cambiar_estado_revision(id: String!, cambiosSolicitados: String!): Boolean!

  """Esta funcion programa un mantenimiento"""
  programar_mantenimiento(programarMantInput: PrograMantenimientoDto!): String!

  """
  Esta funcion registra un mantenimiento que no haya sido previamente programado, ademas en el apartado de repuestos, solo pide entregar una id y la cantidad
  """
  regisrar_mantenimiento_no_programado(updateOneMantenimientoInput: UpdateOneMantenimientoDto!): String!

  """
  Esta Función registra un mantenimiento que ya haya sido previamente programado, ademas en el apartado de repuestos, pide entregar una id y la cantidad
  """
  regisrar_mantenimiento_programado(registrarMantInput: UpdateMantenimientoDto!): String!

  """
  Esta función actualiza el campo diagnosticoFinal de un mantenimiento y cambia su estado a "completado"
  """
  completar_mantenimiento(id: String!, diagnosticoFinal: String!): String!

  """Esta Función registra un auto en la base de datos"""
  crear_auto(createCarInput: CreateCarDto!): String!

  """
  Esta Función registra un repuesto en la base de datos y retorna true si se registro correctamente
  """
  crear_repuesto(createRepuestoInput: CreateRepuestoDto!): Boolean!

  """
  Esta Función se usa internamente para actualizar repuestos en la base de datos y retorna true si se actualizo correctamente, no usar en el cliente
  """
  verficar_repuestos(verifyRepuestoInput: VerifyRepuestoDto!): Boolean!

  """
  Esta Función registra una factura en la base de datos y retorna el id de la factura creada
  """
  crear_factura(createFacturaInput: CreateFacturaDto!): String!

  """
  Esta Función registra un nuevo persoanl en la base de datos y retorna el id del documento creado
  """
  crear_Personal(input: PersonalInput!): String!

  """
  Esta Función agrega un nuevo salario y una fecha al personal en la base de datos y retorna el documento actualizado
  """
  Agregar_Salario_Fecha(id: String!, salarioFecha: SalarioFechaInput!): PersonalDto!

  """
  Esta Función elimina un personal de la base de datos y retorna un booleano indicando si se eliminó correctamente o no
  """
  borrar_Personal(id: String!): Boolean!

  """
  Esta Función registra un nuevo cliente en la base de datos y retorna el id del documento creado
  """
  crear_Cliente(cliente: ClienteInput!): String!

  """
  Esta Función elimina un cliente de la base de datos y retorna un booleano indicando si se eliminó correctamente o no
  """
  borrar_Cliente(id: String!): Boolean!

  """
  Esta Función agrega un nuevo contrato al cliente en la base de datos y retorna el documento actualizado
  """
  Agregar_Contrato(id: String!, contrato: ContratoInput!): ClienteDto!
}

input CreateUserDto {
  name: String!
  username: String!
  email: String!
  password: String!
  clienteAsociado: String
  nivelUser: String!
}

input PrograMantenimientoDto {
  placa: String!
  tipo: String!
  tecnico: String!
  fecha: DateTime!
  anotaciones: String!
}

input UpdateOneMantenimientoDto {
  placa: String!
  tipo: String!
  tecnico: String!
  fecha: DateTime!
  kmMedido: Float!
  fechaInicio: DateTime!
  diagnostico: String!
  repuestos: [RepuestoDto!]
}

input RepuestoDto {
  id: String!
  cantidadReserva: Float
  marca: String!
  producto: String!
  cantidad: Float!
  precio: Float
}

input UpdateMantenimientoDto {
  _id: String!
  kmMedido: Float!
  fechaInicio: DateTime!
  fecha: DateTime!
  diagnostico: String!
  repuestos: [RepuestoDto!]
}

input CreateCarDto {
  placa: String!
  propietario: String!
  cliente: String!
  fechaSoat: DateTime!
  kmRegistroInicial: Int!
  tipoContrato: String!
  fechaRevision: DateTime!
  vigenciaContrato: DateTime!
  puntaje: Int
}

input CreateRepuestoDto {
  cantidadReserva: Float!
  marca: String!
  producto: String!
  cantidad: Float!
  precio: Float!
}

input VerifyRepuestoDto {
  repuestos: [RepuestoDto!]
}

input CreateFacturaDto {
  numeroFactura: String
  monto: Float!
  igv: Float
  detraccion: Float
  tipo: String!
  notificacion: Boolean!
  fecha: DateTime!
  involucrado: String
  documentos: [String!]
}

input PersonalInput {
  _id: String!
  nombre: String!
  numero: Int
  email: String
  fechaIngreso: DateTime
  salarioFecha: [SalarioFechaInput]
  documentos: [String]
}

input SalarioFechaInput {
  salario: Float!
  fecha: DateTime!
}

input ClienteInput {
  _id: String
  nombre: String!
  ruc: String!
  direccion: String!
  nombreCliente: String
  numeroContacto: Float
  email: String!
  rubro: String!
  contratos: [ContratoInput]
  documentos: [String]
}

input ContratoInput {
  numeroContrato: String!
  fechaInicio: DateTime!
  fechaFin: DateTime!
}

type Subscription {
  """
  Esta funcion retorna el calendario de mantenimientos programados del mes, y ademas los mantenimientos para el dia de hoy
  """
  Calendar_Hoy_Tecnico: CalendarAndMantenimientosDTO

  """
  Esta funcion retorna los mantenimientos desde el día de hoy para la pestaña de actividades
  """
  Actividades: [homeMantDTO!]!
  Personal: [PersonalDto!]!
}